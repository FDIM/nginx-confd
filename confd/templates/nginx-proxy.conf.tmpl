{{ $prefix := getenv "CONFD_PREFIX" }}
{{ range $service := lsdir $prefix }}
  {{ $skey := printf "%s/%s" $prefix $service }}
upstream {{ $service }} {  
    {{ range $entry := gets (printf "%s/*" $skey) }}
      {{ with $data := json $entry.Value }}
  server {{ $data.host }}:{{ with $data.port }}{{ . }}{{ else }}1{{ end }};
      {{ end }}
    {{ end }}
}
{{ end }}

{{ range $pubport := split (getenv "NGINX_PORTS") " " }}
  {{ if or (ne $pubport "443") (ne (len (ls "/services/nginx/ssl")) 0) }}
server {
  listen {{ $pubport }};
    {{ if eq $pubport "443" }}
  ssl on;
  ssl_certificate /etc/ssl/server.crt;
  ssl_certificate_key /etc/ssl/server.key;
    {{ end }}
    {{ range $service_path := split (getenv (printf "NGINX_SERVICES_%s" $pubport)) " " }}
      {{ with $service_path_arr := split $service_path ":" }}
        {{ $service := index $service_path_arr 0 }}
        {{ $path := index $service_path_arr 1 }}
        {{ if eq (len $service_path_arr) 3 }}
          {{ range $excluded_path := split (index $service_path_arr 2) "," }}
  location ^~ {{ $path }}{{$excluded_path}} {
    return 404;
  }
          {{ end }}
        {{ end }}
        {{ with $skey := printf "%s/%s" $prefix $service }}
          {{ if ne (len (ls $skey)) 0 }}
  location {{ $path }} {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_set_header X-NginX-Proxy true;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_max_temp_file_size 0;
    proxy_redirect off;
    proxy_read_timeout 240s;
    proxy_pass http://{{ $service }}/;
  }
          {{ end }}
        {{ end }}
      {{ end }}
    {{ end }}  
}
  {{ end }}
{{ end }}
